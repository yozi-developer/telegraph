{"version":3,"sources":["../src/server.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAEA;;;;AACA;;;;AACA,MAAM,QAAQ,oBAAU,qBAAV,CAAd;;;;;AAKO,MAAM,UAAN,CAAiB;;;;;AAKpB,kBAAc;AACV,cAAM,mBAAN;AACA,aAAK,SAAL,GAAiB,gBAAO,OAAP,CAAe;AAC5B,yBAAa,IADe;AAE5B,uBAAW,E;AACP,+CAA+B;AADxB;;AAFiB,SAAf,CAAjB;AAOH;;;;;;;AAOK,SAAN,CAAY,IAAZ,EAAkB,IAAlB,EAAwB;AAAA;;AAAA;AACpB,kBAAK,UAAL,GAAkB,MAAK,SAAL,CAAe,MAAf,CAAsB,IAAtB,EAA4B,IAA5B,CAAlB;AADoB;AAEvB;;;;;AAKK,QAAN,GAAa;AAAA;;AAAA;AACT,kBAAM,qBAAN;AACA,kBAAM,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AAClC,uBAAK,UAAL,CAAgB,KAAhB,CAAsB,YAAK;AACvB,0BAAM,4CAAN;AACA,2BAAO,OAAK,UAAZ;AACA;AACH,iBAJD;AAKH,aANK,CAAN;AAFS;AASZ;;;;;;;AAOD,WAAO,UAAP,EAAmB,cAAnB,EAAmC;AAC/B,aAAK,SAAL,CAAe,MAAf,CAAsB,UAAtB,EAAkC,UAAU,IAAV,EAAgB,IAAhB,EAAsB,QAAtB,EAAgC;AAC9D,2BAAe,GAAG,IAAlB,EACK,IADL,CACW,MAAD,IAAW;AACb,yBAAS,IAAT,EAAe,MAAf;AACH,aAHL,EAIK,KAJL,CAIY,GAAD,IAAQ;AACX,oBAAG,EAAE,eAAe,KAAjB,CAAH,EAA2B;AACvB,0BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACH;AACD,yBAAS,GAAT,EAAc,IAAd;AACH,aATL;AAUH,SAXD;AAYH;AAzDmB;QAAX,U,GAAA,U","file":"server.js","sourcesContent":["'use strict';\n\nimport Debug from 'debug';\nimport {Server} from 'json-rpc2';\nconst debug = new Debug('ws-telegraph:server');\n\n/**\n * Telegraph-server\n */\nexport class WsTgServer {\n    /**\n     * Create ws-server with provided settings\n     * @see: Server from https://www.npmjs.com/package/json-rpc2\n     */\n    constructor() {\n        debug('try create server');\n        this.apiServer = Server.$create({\n            'websocket': true,\n            'headers': { // allow custom headers is empty by default\n                'Access-Control-Allow-Origin': '*'\n            }\n\n        });\n    }\n\n    /**\n     * Start server on port\n     * @param {string} host\n     * @param {number} port\n     */\n    async start(host, port) {\n        this.httpServer = this.apiServer.listen(port, host);\n    }\n\n    /**\n     * Close all connections and frees port\n     */\n    async stop() {\n        debug('Perform server stop');\n        await new Promise((resolve, reject)=> {\n            this.httpServer.close(()=> {\n                debug('WsTgServer stopped, all connections closed');\n                delete this.httpServer;\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Expose method\n     * @param {String} methodName\n     * @param {Function} methodCallback\n     */\n    expose(methodName, methodCallback) {\n        this.apiServer.expose(methodName, function (args, conn, callback) {\n            methodCallback(...args)\n                .then((result)=> {\n                    callback(null, result);\n                })\n                .catch((err)=> {\n                    if(!(err instanceof Error)){\n                        err = new Error(err);\n                    }\n                    callback(err, null);\n                });\n        });\n    }\n}\n"]}