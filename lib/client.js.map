{"version":3,"sources":["../src/client.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAEA;;AACA;;;;;;AACA,MAAM,QAAQ,oBAAU,qBAAV,CAAR;;;;;AAMC,MAAM,UAAN,CAAiB;AACpB,kBAAc;AACV,cAAM,mBAAN,EADU;KAAd;;;;;;AADoB,SAUpB,CAAY,IAAZ,EAAkB,IAAlB,EAAwB;;;;AACpB,kBAAM,mBAAN;AACA,kBAAK,SAAL,GAAiB,gBAAO,OAAP,CAAe,IAAf,EAAqB,IAArB,CAAjB;AACA,kBAAM,EAAC,WAAW,MAAK,SAAL,EAAlB;AACA,kBAAK,OAAL,GAAe,MAAM,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;;AAEjD,sBAAK,SAAL,CAAe,gBAAf,CAAgC,UAAC,GAAD,EAAM,IAAN,EAAc;AAC1C,0BAAM,EAAC,KAAK,GAAL,EAAU,MAAM,IAAN,EAAjB,EAD0C;AAE1C,wBAAI,GAAJ,EAAS;AACL,+BAAO,OAAO,GAAP,CAAP,CADK;qBAAT;AAGA,wBAAG,CAAC,IAAD,EAAM;AACL,+BAAO,OAAO,IAAI,KAAJ,CAAU,iCAAV,CAAP,CAAP,CADK;qBAAT;AAGA,2BAAO,QAAQ,IAAR,CAAP,CAR0C;iBAAd,CAAhC,CAFiD;aAApB,CAAlB;AAaf,kBAAK,OAAL,CAAa,IAAb,CAAkB,EAAlB,CAAqB,OAArB,EAA8B,YAAI,EAAJ,CAA9B;aAjBoB;KAAxB;;AAsBA,WAAa;;;;AACT,kBAAM,kBAAN;AACA,mBAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB;aAFS;KAAb;;;;;;;;AAhCoB,QA2CpB,CAAW,MAAX,EAA4B;;;0CAAN;;SAAM;;;AACxB,kBAAM,EAAC,OAAO,iBAAP,EAA0B,QAAQ,MAAR,EAAgB,MAAM,IAAN,EAAjD;AACA,mBAAO,MAAM,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACzC,uBAAK,OAAL,CAAa,IAAb,CAAkB,MAAlB,EAA0B,IAA1B,EAAgC,UAAC,GAAD,EAAM,MAAN,EAAgB;AAC5C,wBAAI,GAAJ,EAAS;AACL,4BAAG,EAAE,eAAe,KAAf,CAAF,EAAwB;AACvB,kCAAM,IAAI,KAAJ,CAAU,GAAV,CAAN,CADuB;yBAA3B;AAGA,+BAAO,OAAO,GAAP,CAAP,CAJK;qBAAT;AAMA,2BAAO,QAAQ,MAAR,CAAP,CAP4C;iBAAhB,CAAhC,CADyC;aAApB,CAAlB;aAFiB;KAA5B;CA3CG;QAAM","file":"client.js","sourcesContent":["'use strict';\n\nimport {Client} from 'json-rpc2';\nimport Debug from 'debug';\nconst debug = new Debug('ws-telegraph:client');\n\n\n/**\n * WsTgClient for Telegraph-server\n */\nexport class WsTgClient {\n    constructor() {\n        debug('try create client');\n    }\n\n    /**\n     * @param {string} host\n     * @param {number} port\n\n     */\n    async start(host, port) {\n        debug('Client call start');\n        this.apiClient = Client.$create(port, host);\n        debug({apiClient: this.apiClient});\n        this.apiConn = await new Promise((resolve, reject)=> {\n            \n            this.apiClient.connectWebsocket((err, conn)=> {\n                debug({err: err, conn: conn});\n                if (err) {\n                    return reject(err);\n                }\n                if(!conn){\n                    return reject(new Error('Client connection don\\'t opened'));\n                }\n                return resolve(conn);\n            });\n        });\n        this.apiConn.conn.on('error', ()=>{\n            \n        });\n    }\n\n    async stop() {\n        debug('Client call stop');\n        this.apiConn.conn.close();\n    }\n\n    /**\n     * Perform RPC and wait result\n     * @param {string} method - method name\n     * @param {...{}} [args]  arguments for remote procedure\n     * @return {*}\n     */\n    async call(method, ...args) {\n        debug({event: 'WsTgClient call', method: method, args: args});\n        return await new Promise((resolve, reject)=> {\n            this.apiConn.call(method, args, (err, result)=> {\n                if (err) {\n                    if(!(err instanceof Error)){\n                        err = new Error(err);\n                    }\n                    return reject(err);\n                }\n                return resolve(result);\n            });\n        });\n\n    }\n}\n\n"]}